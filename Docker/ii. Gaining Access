Working with external data 
	Mount a volume path (-v <host_dir>:<container_dir>)
	mkdir ~/volume_location
	docker run -v ~/volume_location:/container_dir <image_name> 
		container runs as root, so files created by container will be created as root

Mount a bound volume
	docker volume create volume_name
  	docker run -v volume_name:/container_dir <image_name>
 		will also create volume of that name, if not already existing
  	 docker volume inspect volume_name
  	 	will show /var/lib/docker/volume/volume_name/_data

Copy from/to container
  	 cp <container_name>:/<container_path> ./

can override Dockerfile ENTRYPOINT to get shell
	docker run --entrypoint=/bin/ash -it <image_name>

cap_net_raw can allow for ARP spoofing and MITM - see Etienne's blog (blog.champtar.fr)

capabilities can be used to hide privileged binaries 
	we would usually note anything with SETUID running as root
	that would not find processes running with CAP_SYS_ADMIN (essentially root)
		can detect using filecap tool to audit for files with dangerous capabilities
			filecap <directory>

create a privileged container from an image
	curl -X POST "http://127.1:2375/images/create?fromImage=<image_name>&tag=<image_tag>"
	curl --header "Content-Type: application/json" --request POST --data '{"Image": "<image_name>", "Privileged": true}' http://127.1:2375/containers/create
		this will return an image ID for use in launching it

launch a privileged container from an image
	curl -X POST http://127.1:2375/containers/<ID>/start



