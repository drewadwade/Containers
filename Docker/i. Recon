***Docker is Linux processes configured to provide the illusion of isolation***

Indicators you're in a container
	/.dockerenv
	PID 1 -> likely not init or systemd
	ps aux -> very few processes
	ps -ef -> no hardware management processes
	cat /proc/1/cgroups -> paths include "docker"

nmap
	2375 - Docker Daemon (unauthenticated) API
	2376 - Docker Daemon (authenticated) API
		   network authentication based on client certificates (see .docker folder)
	5000 - Docker Registry default

	
Query unauthenticated Docker Daemon API
	get containers
		docker -H tcp://<IP_address>:2375 ps
	get images 
		docker -H tcp://<IP_address>:2375 images
	dump logs from a running container
		curl --output - http://<IP_address>:2375/containers/<container_ID>/logs?stdout=true

List capabilities within a container
	capsh --print


Local access to Docker socket
	access to an account in the docker group would be most likely means of access

	/var/run/docker.sock
		default permissions is 660 (root:docker) - look for 777s
		anyone who can access that file can access the containers

		Linux 18.09+ - Docker client can also access engine instance via SSH
			need to configure for key-based logins (or will be prompted for password on each command)

	containerd socket
		/var/run/docker/libcontainerd/docker-containerd.sock 		for versions <18.09
		/var/run/containerd/containerd.sock 						for versions 18.09+
	
	Windows - accessed via named pipe at \.\pipe\docker_engine




Query Docker registries
	for Docker Hub only
		docker search

	show remote registry catalog
		curl http://<registry_IP>:5000/<API_version_e.g._v2/_catalog
	show image tags
		curl http://<registry_IP>:5000/v2/<repository_name>/<image_name>/tags/list

	show remote image manifest
		curl http://<registry_IP>:5000/v2/<repository_name>/<image_name>/manifests/<tag>

		"history" key - commands executed during the image building stage stored in plaintext

	retrieve all image manifests from a registry
		https://github.com/nccgroup/go-pillage-registries

	should not use external non-official images or non-Docker-certified images
		official tag visible in Docker Hub or in results of `docker search <image_name>`
		offical images will also not be preceded by a user ID

	images should have been updated recently


Retrieving Docker images
	docker pull <repository_IP>:5000/<repository_name>/<image_name>


Reversing Dockerfiles
	fine for standard image reviews but the recovered metadata will not tell whole story

	manually
		mkdir <output_dir> && cd <output_dir
		docker save -o <output_file>.tar <image_name>
		tar -xvf <output_file>.tar
			each directory created is a layer
				json is metadata for the layer - what was run
		cat <layer>.json | jq
			files copied in will be referred to using hash, not filename

	automated
		dive - github.com/wagoodman/dive

			docker images
				get image ID
			dive <image_ID>

		whaler - github.com/P3GL3G/Whaler
			(not well-supported)

			whaler -sV=<docker_API_version> <image_name>

	USER <username> 
		running as root ("Image User") is bad (not terrible) practice
			LOW in regular env, MED in high security env
			some commands may require root (e.g. package manager calls)
		can use username or UID/GID - will need to create using RUN in Dockerfile
		




query container parameters (e.g. IP)
	docker inspect -f "{{ .NetworkSettings.IPAddress }}" <container_name>

Listen for events (create/delete/etc) on containerd
	ctr --address /var/run/containerd/containerd.sock events


Docker Daemon
	by default it won't listen on the network at all, but ports can be exposed from containers to network
		/etc/systemd/system/docker.service 
			ExecStart will have -H fd:// section by default - listening local only, not network
		/etc/docker/daemon.json
			will have "hosts" line(s) defining its listener(s)

	Attack Surface - Local
	Attack Surface - Remote







.dockerignore - sim .gitignore

watch out for secrets in environment variables (ENV)

the "registry" image is a Docker reference image for a local registry
	should not appear in prod


minimal container build (e.g., just necessary binary) may not have shell capability
	may not be scannable w/ vuln scanner either

mnt namespace
	be careful of permissions (UID inside container may not be same as UID outside container)

user namespace
	will break things in K8s - recommend for high sec in pure Docker

missing flag to prevent container gaining additional privileges allows privesc
	docker run --security-opt:no-new-privileges:true <image_name>
		can be set on container or at daemon level (for all containers)
		not set by default!
	no reason not to set it! easy hardening finding			

check if seccomp is enabled
	docker inspect
		won't show anything if enabled
		will show "seccomp=unconfined" under "SecurityOpt" if disabled
	get container process PID using ps and check content of /proc/<PID>/status 
		"Seccomp: 0" means unconfined (disabled)
		"Seccomp: 2" means seccomp profile applied (enabled)

Scanning Docker containers for vulnerabilities
	clair
		docker run -d --name db arminc/clair-db:<yesterday's_date_yyyy-mm-dd>
		docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.6
		clair-scanner --clair="http://172.17.10.117:6060" --ip="172.17.10.117" <pulled_image_to_scan>
	trivy

